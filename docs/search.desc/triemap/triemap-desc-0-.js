searchState.loadedDescShard("triemap", 0, "The <code>AsBytes</code> trait allows a type to be used as a key in a …\nA draining iterator over the key-value pairs of a <code>TrieMap</code>.\nRepresents an entry in a <code>TrieMap</code> which may either be …\nAn owning iterator over the key-value pairs of a <code>TrieMap</code>.\nAn owning iterator over the keys of a <code>TrieMap</code>.\nAn owning iterator over the values of a <code>TrieMap</code>.\nAn iterator over the key-value pairs of a <code>TrieMap</code>.\nA mutable iterator over the key-value pairs of a <code>TrieMap</code>.\nAn iterator over the keys of a <code>TrieMap</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>TrieMap</code>.\nAn iterator over entries with keys that start with a …\nIterator for keys that start with a specific prefix.\nIterator for values that have keys starting with a …\nA <code>TrieMap</code> is a key-value data structure that uses a trie …\nA vacant entry.\nA view into a vacant entry in a <code>TrieMap</code>.\nAn iterator over the values of a <code>TrieMap</code>.\nA mutable iterator over the values of a <code>TrieMap</code>.\nProvides in-place mutable access to an occupied entry.\nConverts the value to a byte slice.\nReturns the number of elements the map can hold without …\nRemoves all elements from the map.\nReturns <code>true</code> if the map contains a value for the specified …\nCreates a new empty <code>TrieMap</code>.\nReturns a new map containing the entries whose keys are in …\nReturns a new map containing the entries whose keys are in …\nRemoves all key-value pairs from the map, returning them …\nReturns an entry representing a key in the map.\nGets an entry for a key reference.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nReturns a reference to the value in the entry.\nGets a reference to the value in the entry.\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\nReturns a mutable reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nGets the given key’s corresponding value if it exists, …\nGets the given key’s corresponding value if it exists, …\nReturns all key-value pairs for keys that start with the …\nInserts a key-value pair into the map.\nReplaces the value in the entry with the given value, …\nInserts the given value into the entry, and returns a …\nCreates a new map with the given key-value pair added.\nReturns a new map containing only the entries whose keys …\nReturns a new map containing only the entries whose keys …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the map into an iterator over keys.\nConverts the entry into a mutable reference to the value.\nConverts the map into an iterator over values.\nReturns <code>true</code> if the map contains no elements.\nDetermines whether this map is a proper subset of another …\nDetermines whether this map is a subset of another map.\nReturns an iterator over the key-value pairs of the map.\nReturns a mutable iterator over the key-value pairs of the …\nReturns a reference to the key in the entry.\nGets a reference to the key in the entry.\nGets a reference to the key that would be used when …\nReturns an iterator over the keys of the map.\nReturns all keys that start with the given prefix.\nReturns the number of elements in the map.\nMerges another map into this one.\nMerges another map into this one using a custom function …\nCreates a new empty <code>TrieMap</code>.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the given …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting the result of …\nReturns an iterator over all key-value pairs with keys …\nReturns an iterator over all keys that start with the …\nReturns an iterator over all values whose keys start with …\nRemoves a key from the map, returning the value at the key …\nRemoves the entry, returning the value.\nRemoves all entries where the key starts with the given …\nCreates a new map with the given key removed.\nReserves capacity for at least <code>additional</code> more elements.\nRetains only the elements specified by the predicate.\nShrinks the capacity of the map as much as possible.\nReturns <code>true</code> if the map contains any keys starting with …\nReturns a new map containing entries whose keys are in …\nReturns a new map containing entries whose keys are in …\nTries to insert a key-value pair into the map.\nReturns a new map containing all entries from both maps.\nUpdates a value if the key exists.\nUpdates a value if the key exists, otherwise inserts a new …\nReturns an iterator over the values of the map.\nReturns a mutable iterator over the values of the map.\nCreates a new <code>TrieMap</code> with the specified capacity.\nCreates a new map with only entries that match the given …\nCreates a new map without any entries that match the given …")